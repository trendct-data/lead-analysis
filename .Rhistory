cor(comparing5$bll20.percent, comparing5$towns.served)
cor(comparing5$bll20.percent, comparing5$town.hqs)
served_count_map <- left_join(towntracts, comparing5)
dtm_served <- ggplot() +
geom_polygon(data = served_count_map, aes(x=long, y=lat, group=group, fill=towns.served), color = "black", size=0.2) +
coord_map() +
scale_fill_distiller(type="seq", trans="reverse", palette = "Blues", breaks=pretty_breaks(n=10)) +
theme_nothing(legend=TRUE) +
labs(title="Towns served", fill="")
dtm_hqs <- ggplot() +
geom_polygon(data = served_count_map, aes(x=long, y=lat, group=group, fill=town.hqs), color = "black", size=0.2) +
coord_map() +
scale_fill_distiller(type="seq", trans="reverse", palette = "Blues", breaks=pretty_breaks(n=10)) +
theme_nothing(legend=TRUE) +
labs(title="System address", fill="")
grid.arrange(dtm_served,dtm_hqs, ncol=2)
## PPBS?? HQ
ppbs_towns <- ct %>%
group_by(town.city) %>%
summarize(median.ppb=median(Sample.Measure..mg.L.)*1000, average.ppb=mean(Sample.Measure..mg.L.)*1000)
ppbs_towns_clean <- ctnamecleaner(town.city, ppbs_towns)
ppbs_towns_clean <- ppbs_towns_clean[!is.na(ppbs_towns_clean$real.town.name),]
ppbs_towns_clean <- ppbs_towns_clean %>%
group_by(real.town.name) %>%
summarize(median.ppb=median(median.ppb), average.ppb=mean(average.ppb))
colnames(ppbs_towns_clean) <- c("id", "median.ppb.hq", "average.ppb.hq")
comparing6 <- left_join(comparing5, ppbs_towns_clean)
ppb_map_hq <- left_join(towntracts, comparing6)
dtm_median <- ggplot() +
geom_polygon(data = ppb_map_hq, aes(x=long, y=lat, group=group, fill=median.ppb.hq), color = "black", size=0.2) +
coord_map() +
scale_fill_distiller(type="seq", trans="reverse", palette = "Blues", breaks=pretty_breaks(n=10)) +
theme_nothing(legend=TRUE) +
labs(title="Median PPB by town", fill="")
dtm_avg <- ggplot() +
geom_polygon(data = ppb_map_hq, aes(x=long, y=lat, group=group, fill=average.ppb.hq), color = "black", size=0.2) +
coord_map() +
scale_fill_distiller(type="seq", trans="reverse", palette = "Blues", breaks=pretty_breaks(n=10)) +
theme_nothing(legend=TRUE) +
labs(title="Average PPB by town", fill="")
grid.arrange(dtm_median,dtm_avg, ncol=2)
cor(comparing6$riskscore_raw, comparing6$median.ppb.hq, use = "complete")
cor(comparing6$riskscore_raw, comparing6$average.ppb.hq, use = "complete")
comparing6$median.ppb.hq[is.na(comparing6$median.ppb.hq)] <- 0
comparing6$average.ppb.hq[is.na(comparing6$average.ppb.hq)] <- 0
cor(comparing6$riskscore_raw, comparing6$median.ppb.hq)
cor(comparing6$riskscore_raw, comparing6$average.ppb.hq)
## PPBS?? served
ppbs_served <- ct %>%
group_by(Cities.Served) %>%
summarize(median.ppb=median(Sample.Measure..mg.L.)*1000, average.ppb=mean(Sample.Measure..mg.L.)*1000)
ppbs_served_clean <- ctnamecleaner(Cities.Served, ppbs_served)
ppbs_served_clean <- ppbs_served_clean[!is.na(ppbs_served_clean$real.town.name),]
ppbs_served_clean <- ppbs_served_clean %>%
group_by(real.town.name) %>%
summarize(median.ppb=median(median.ppb), average.ppb=mean(average.ppb))
colnames(ppbs_served_clean) <- c("id", "median.ppb.served", "average.ppb.served")
comparing7 <- left_join(comparing6, ppbs_served_clean)
ppb_map_hq <- left_join(towntracts, comparing7)
dtm_median_served <- ggplot() +
geom_polygon(data = ppb_map_hq, aes(x=long, y=lat, group=group, fill=median.ppb.served), color = "black", size=0.2) +
coord_map() +
scale_fill_distiller(type="seq", trans="reverse", palette = "Blues", breaks=pretty_breaks(n=10)) +
theme_nothing(legend=TRUE) +
labs(title="Median PPB by town served", fill="")
dtm_avg_served <- ggplot() +
geom_polygon(data = ppb_map_hq, aes(x=long, y=lat, group=group, fill=average.ppb.served), color = "black", size=0.2) +
coord_map() +
scale_fill_distiller(type="seq", trans="reverse", palette = "Blues", breaks=pretty_breaks(n=10)) +
theme_nothing(legend=TRUE) +
labs(title="Average PPB by town served", fill="")
grid.arrange(dtm_median_served,dtm_avg_served, ncol=2)
cor(comparing7$riskscore_raw, comparing7$median.ppb.served, use = "complete")
cor(comparing7$riskscore_raw, comparing7$average.ppb.served, use = "complete")
comparing7$median.ppb.served[is.na(comparing7$median.ppb.served)] <- 0
comparing7$average.ppb.served[is.na(comparing7$average.ppb.served)] <- 0
cor(comparing7$riskscore_raw, comparing7$median.ppb.served)
cor(comparing7$riskscore_raw, comparing7$average.ppb.served)
## urban or rural?
designation <- read.csv("data/urban_or_rural.csv", stringsAsFactors=FALSE)
town_des <- designation[c("NAME10", "Type", "perc_urban")]
colnames(town_des) <-c("id", "Type", "perc_urban")
comparing8 <- left_join(comparing7, town_des)
big_df <- comparing8
big_df_0 <- big_df
big_df_0[is.na(big_df_0)] <- 0
big_df_na <- big_df
big_df_na[big_df_na==0] <- NA
raw_scatter1_0 <- big_df_0[c("id", "riskscore_raw", "bll5.percent")]
raw_scatter1_0 <- raw_scatter1_0 %>%
gather("Type", "Score", 2:3)
p <- ggplot(big_df_na, aes(riskscore_raw, bll5.percent))
p + geom_point(aes(colour = perc_urban,  trans="reverse", ))
p + geom_point(aes(colour = factor(Type)))
head(big_df_na)
p + geom_point(aes(colour = perc_urban,  trans="reverse", ))
p <- ggplot(big_df_na, aes(riskscore_raw, bll5.percent))
p + geom_point(aes(colour = factor(Type)))
p <- ggplot(big_df_na, aes(quantile, bll5.percent))
p + geom_point(aes(colour = factor(Type)))
p + geom_point(aes(colour = factor(Type)))
p <- ggplot(big_df_na, aes(riskscore_raw, bll5.percent))
p + geom_point(aes(colour = factor(Type)))
p <- ggplot(big_df_0, aes(riskscore_raw, bll5.percent))
p + geom_point(aes(colour = factor(Type)))
p + geom_point(aes(colour = factor(Type)))
p <- ggplot(big_df_na, aes(riskscore_raw, bll5.percent))
p + geom_point(aes(colour = factor(Type)))
cor(big_df_0$riskscore_raw, big_df_0$bll5.percent)
cor(big_df_0$riskscore_raw, big_df_0$bll20.percent)
cor(big_df_0$riskscore_raw, big_df_0$bll20)
p <- ggplot(big_df_0, aes(riskscore_raw, bll5))
p + geom_point(aes(colour = factor(Type)))
p <- ggplot(big_df_0, aes(quantile, bll5.percent))
p + geom_point(aes(colour = factor(Type)))
cor(big_df_0$quantile, big_df_0$bll5.percent)
p <- ggplot(big_df_0, aes(bll5,riskscore_raw))
p + geom_point(aes(colour = factor(Type)))
p <- ggplot(big_df_0, aes(bll5.percent, quantile))
p + geom_point(aes(colour = factor(Type)))
head(big_df_0)
library(corrgram)
corrgram(big_df_0)
corrgram(big_df_0,order=TRUE, lower.panel=panel.shade,
upper.panel=panel.pie)
p <- ggplot(big_df_na, aes(factor(Type), riskscore_raw))
p + geom_boxplot()
p <- ggplot(big_df_na, aes(factor(Type), quantile))
p + geom_boxplot()
p <- ggplot(big_df_na, aes(factor(Type), bll5))
p + geom_boxplot()
p <- ggplot(big_df_na, aes(factor(Type), bll5.percent))
p + geom_boxplot()
p <- ggplot(big_df_na, aes(factor(Type), average.ppb.served))
p + geom_boxplot()
p <- ggplot(big_df_na, aes(factor(Type), median.ppb.served))
p + geom_boxplot()
p <- ggplot(big_df_0, aes(factor(Type), median.ppb.served))
p + geom_boxplot()
p <- ggplot(big_df_0, aes(factor(Type), bll5.percent))
p + geom_boxplot()
p <- ggplot(big_df_na, aes(factor(Type), quantile))
p + geom_boxplot()
p <- ggplot(big_df_na, aes(factor(Type), median.ppb.served))
p + geom_boxplot()
tapply(big_df_0$quantile, big_df_0$Type, median)
tapply(big_df_0$quantile, big_df_0$Type, mean)
tapply(big_df_0$bll5.percent, big_df_0$Type, mean)
tapply(big_df_0$bll5, big_df_0$Type, mean)
tapply(big_df_0$bll5.percent, big_df_0$Type, median)
tapply(big_df_0$bll5, big_df_0$Type, median)
tapply(big_df_0$town.hqs, big_df_0$Type, median)
tapply(big_df_0$town.hqs, big_df_0$Type, mean)
tapply(big_df_0$towns.served, big_df_0$Type, mean)
tapply(big_df_0$towns.served, big_df_0$Type, median)
tapply(big_df_na$towns.served, big_df_0$Type, median)
tapply(big_df_na$towns.served, big_df_0$Type, median, rm.na=TRUE)
tapply(big_df_na$towns.served, big_df_0$Type, median, na.rm=TRUE)
tapply(big_df_na$bll5, big_df_0$Type, median, na.rm=TRUE)
tapply(big_df_na$bll5.percent, big_df_0$Type, median, na.rm=TRUE)
tapply(big_df_na$bll5.percent, big_df_na$Type, median, na.rm=TRUE)
tapply(big_df_na$quantile, big_df_na$Type, median, na.rm=TRUE)
tapply(big_df_na$bll5.percent, big_df_na$median.ppb.served, median, na.rm=TRUE)
tapply(big_df_na$median.ppb.served, big_df_na$Type, median, na.rm=TRUE)
corrgram(big_df_na,order=TRUE, lower.panel=panel.shade,
upper.panel=panel.pie)
p <- ggplot(big_df_0, aes(bll5,riskscore_raw))
p + geom_point(aes(colour = factor(Type)))
p <- ggplot(big_df_na, aes(riskscore_raw, bll5))
p + geom_point(aes(colour = factor(Type)))
cor(big_df_na$riskscore_raw, big_df_0$bll20)
p <- ggplot(big_df_na, aes(riskscore_raw, bll20))
p + geom_point(aes(colour = factor(Type)))
p <- ggplot(big_df_na, aes(riskscore_raw, bll5))
p + geom_point(aes(colour = factor(Type)))
cor(big_df_na$riskscore_raw, big_df_0$bll5)
p + geom_point(aes(colour = Type))
p <- ggplot(big_df_na, aes(riskscore_raw, bll5))
p + geom_point(aes(colour = Type)) + labs(title = "Number of children with lead detected in blood versus risk score by town type")
p + geom_point(aes(colour = Type)) + labs(title = "Number of children with lead detected in blood versus risk score by town type", x = "Risk score", y="Children with lead detected in blood stream")
write.csv(big_df_na, "big_df.csv")
corrgram(big_df_na,order=TRUE, lower.panel=panel.shade,
upper.panel=panel.pie)
big_df_na_map <- left_join(big_df_na, bll10_total)
big_df_na_map <- left_join(big_df_na, bll10_total, by="id")
ggplot() +
geom_polygon(data = big_df_na, aes(x=long, y=lat, group=group, fill=rankscore_raw), color = "black", size=0.2) +
coord_map() +
scale_fill_distiller(type="seq", trans="reverse", palette = "Blues", breaks=pretty_breaks(n=10)) +
theme_nothing(legend=TRUE) +
labs(title="Number of lead-poisoned children by town (BLL 10 and up)", fill="")
big_df_na_map <- left_join(big_df_na, bll10_total, by="id")
ggplot() +
geom_polygon(data = big_df_na_map, aes(x=long, y=lat, group=group, fill=rankscore_raw), color = "black", size=0.2) +
coord_map() +
scale_fill_distiller(type="seq", trans="reverse", palette = "Blues", breaks=pretty_breaks(n=10)) +
theme_nothing(legend=TRUE) +
labs(title="Number of lead-poisoned children by town (BLL 10 and up)", fill="")
head(big_df_na_map)
big_df_na_map <- left_join(towntracts, big_df_na, by="id")
ggplot() +
geom_polygon(data =big_df_na_map, aes(x=long, y=lat, group=group, fill=rankscore_raw), color = "black", size=0.2) +
coord_map() +
scale_fill_distiller(type="seq", trans="reverse", palette = "Blues", breaks=pretty_breaks(n=10)) +
theme_nothing(legend=TRUE) +
labs(title="Number of lead-poisoned children by town (BLL 10 and up)", fill="")
ggplot() +
geom_polygon(data =big_df_na_map, aes(x=long, y=lat, group=group, fill=riskscore_raw), color = "black", size=0.2) +
coord_map() +
scale_fill_distiller(type="seq", trans="reverse", palette = "Blues", breaks=pretty_breaks(n=10)) +
theme_nothing(legend=TRUE) +
labs(title="Number of lead-poisoned children by town (BLL 10 and up)", fill="")
corrgram(big_df_na,order=TRUE, lower.panel=panel.shade,
upper.panel=panel.pie)
map1 <- ggplot() +
geom_polygon(data =big_df_na_map, aes(x=long, y=lat, group=group, fill=riskscore_raw), color = "black", size=0.2) +
coord_map() +
scale_fill_distiller(type="seq", trans="reverse", palette = "Blues", breaks=pretty_breaks(n=10)) +
theme_nothing(legend=TRUE) +
labs(title="Lead risk score", fill="")
map2 <- ggplot() +
geom_polygon(data =big_df_na_map, aes(x=long, y=lat, group=group, fill=bll5), color = "black", size=0.2) +
coord_map() +
scale_fill_distiller(type="seq", trans="reverse", palette = "Blues", breaks=pretty_breaks(n=10)) +
theme_nothing(legend=TRUE) +
labs(title="Lead-poisoned children by town (BLL 5 and up)", fill="")
map3 <- ggplot() +
geom_polygon(data =big_df_na_map, aes(x=long, y=lat, group=group, fill=towns.served), color = "black", size=0.2) +
coord_map() +
scale_fill_distiller(type="seq", trans="reverse", palette = "Blues", breaks=pretty_breaks(n=10)) +
theme_nothing(legend=TRUE) +
labs(title="Median PPB detected in drinking water systems", fill="")
map4 <- ggplot() +
geom_polygon(data =big_df_na_map, aes(x=long, y=lat, group=group, fill=median.ppb.served), color = "black", size=0.2) +
coord_map() +
scale_fill_distiller(type="seq", trans="reverse", palette = "Blues", breaks=pretty_breaks(n=10)) +
theme_nothing(legend=TRUE) +
labs(title="Total elevated action lead levels in drinking water", fill="")
grid.arrange(map1, map2, map3, map4, ncol=2)
map1 <- ggplot() +
geom_polygon(data =big_df_na_map, aes(x=long, y=lat, group=group, fill=riskscore_raw), color = "black", size=0.2) +
coord_map() +
scale_fill_distiller(type="seq", trans="reverse", palette = "Blues", breaks=pretty_breaks(n=10)) +
theme_nothing(legend=TRUE) +
labs(title="Lead risk score", fill="")
map2 <- ggplot() +
geom_polygon(data =big_df_na_map, aes(x=long, y=lat, group=group, fill=bll5), color = "black", size=0.2) +
coord_map() +
scale_fill_distiller(type="seq", trans="reverse", palette = "Blues", breaks=pretty_breaks(n=10)) +
theme_nothing(legend=TRUE) +
labs(title="Lead-poisoned children by town (BLL 5 and up)", fill="")
map3 <- ggplot() +
geom_polygon(data =big_df_na_map, aes(x=long, y=lat, group=group, fill=towns.served), color = "black", size=0.2) +
coord_map() +
scale_fill_distiller(type="seq", trans="reverse", palette = "Blues", breaks=pretty_breaks(n=10)) +
theme_nothing(legend=TRUE) +
labs(title="Median PPB detected in drinking water systems", fill="")
map4 <- ggplot() +
geom_polygon(data =big_df_na_map, aes(x=long, y=lat, group=group, fill=median.ppb.served), color = "black", size=0.2) +
coord_map() +
scale_fill_distiller(type="seq", trans="reverse", palette = "Blues", breaks=pretty_breaks(n=10)) +
theme_nothing(legend=TRUE) +
labs(title="Frequency of elevated action lead levels detected in drinking water", fill="")
grid.arrange(map1, map2, map3, map4, ncol=2)
grid.arrange(map2, map1, map3, map4, ncol=2)
View(housing_towns)
p <- ggplot(big_df_na, aes(riskscore_raw, bll5.percent))
p + geom_point(aes(colour = factor(Type)))
p <- ggplot(big_df_na, aes(riskscore_raw, bll5))
p + geom_point(aes(colour = Type)) + labs(title = "Number of children with lead detected in blood versus risk score by town type", x = "Risk score", y="Children with lead detected in blood stream")
p <- ggplot(big_df_na, aes(riskscore_raw, bll5.percent))
p + geom_point(aes(colour = factor(Type)))
cor(big_df_na$riskscore_raw, big_df_0$bll5.percent)
cor(big_df_na$riskscore_raw, big_df_na$bll5.percent)
?cor
cor(big_df_na$riskscore_raw, big_df_na$bll5.percent, use="complete")
cor(big_df_0$riskscore_raw, big_df_0$bll5)
forcsv <- bg_df_na[c("id", "riskscore_raw", "bll5")]
forcsv <- big_df_na[c("id", "riskscore_raw", "bll5")]
write.csv(forcsv, "forcsv.csv")
forcsv <- big_df_na[c("id", "riskscore_raw", "bll5", "Type")]
write.csv(forcsv, "forcsv.csv")
p <- ggplot(big_df_na, aes(riskscore_raw, bll5))
p + geom_point(aes(colour = Type)) + labs(title = "Number of children with lead detected in blood versus risk score by town type", x = "Risk score", y="Children with lead detected in blood stream")
library(kable)
install.packages("kable")
library(DT)
datatable(head(housing))
datatable(head(housing[,1:5]))
head(old)
old <- housing
old$age_39 <- old$B25034_010E * .68
old$age40_59 <- (old$B25034_009E + old$B25034_008E) * .43
old$age60_79 <- (old$B25034_007E + old$B25034_006E) * .08
old$age80_99 <- (old$B25034_005E + old$B25034_004E) * .03
old$age00_10 <- (old$B25034_003E + old$B25034_002E) * 0
old$total <-  old$B25034_001E
old$risk_sum <- old$age_39 + old$age40_59 + old$age60_79 + old$age80_99 + old$age80_99 + old$age00_10
old$risk <- old$risk_sum/old$total*100
old <- subset(old, total>0)
head(old)
datatable(head(housing[c("NAME")]))
datatable(head(old[c("NAME", "total", "risk_sum", "risk")]))
head(poverty)
datatable(head(poverty[c("NAME", "B06012_001E", "B06012_002E", "percent_poverty")]))
head(df)
datatable(head(df[c("id", "z_poverty", "weighted_poverty", "risk", "z_housing", "weighted_housing", "riskscore_raw", "quantile")]))
head(screenings_total)
grid.arrange(dtm5_total,dtm10_total,dtm15_total,dtm20_total, ncol=2)
library(dplyr)
library(scales)
require(rgdal)
require(ggmap)
require(Cairo)
require(maptools)
library(ggplot2)
#devtools::install_github("hrecht/censusapi")
library(censusapi)
source("keys.R")
library(rvest)
library(tidyr)
library(gridExtra)
gpclibPermit()
gpclibPermitStatus()
## Setting up the town tracts from the ctgeo towns shapefile in the maps folder
towntracts <- readOGR(dsn="maps", layer="ctgeo")
towntracts <- fortify(towntracts, region="NAME10")
# bringing in data
# This data is a cleaned up spreadsheet from a previous project
# The original data set can be found on the CT Department of Health website:
# http://www.ct.gov/dph/cwp/view.asp?a=3140&q=387576
screenings_total <- read.csv("data/confirmed.town.total.csv", stringsAsFactors=FALSE)
## Note: BLL stands for blood lead levels. There are different groupings: 5, 10, 15, and 20.
## Health officials must be notified if a child has five or more micrograms of lead per deciliter of blood (µg/dL)
# BLL5 total children
bll5_total <- screenings_total[c("Town", "BLL5")]
colnames(bll5_total) <- c("id", "bll5")
# joining the data to the formatted shapefile
bll5_total_map <- left_join(towntracts, bll5_total)
dtm5_total <- ggplot() +
geom_polygon(data = bll5_total_map, aes(x=long, y=lat, group=group, fill=bll5), color = "black", size=0.2) +
coord_map() +
scale_fill_distiller(type="seq", trans="reverse", palette = "Blues", breaks=pretty_breaks(n=10)) +
theme_nothing(legend=TRUE) +
labs(title="Number of lead-poisoned children by town (BLL 5 and up)", fill="")
# BLL10 total children
bll10_total <- screenings_total[c("Town", "BLL10")]
colnames(bll10_total) <- c("id", "bll10")
bll10_total_map <- left_join(towntracts, bll10_total)
dtm10_total <- ggplot() +
geom_polygon(data = bll10_total_map, aes(x=long, y=lat, group=group, fill=bll10), color = "black", size=0.2) +
coord_map() +
scale_fill_distiller(type="seq", trans="reverse", palette = "Blues", breaks=pretty_breaks(n=10)) +
theme_nothing(legend=TRUE) +
labs(title="Number of lead-poisoned children by town (BLL 10 and up)", fill="")
# BLL15 total children
bll15_total <- screenings_total[c("Town", "BLL15")]
colnames(bll15_total) <- c("id", "bll15")
bll15_total_map <- left_join(towntracts, bll15_total)
dtm15_total <- ggplot() +
geom_polygon(data = bll15_total_map, aes(x=long, y=lat, group=group, fill=bll15), color = "black", size=0.2) +
coord_map() +
scale_fill_distiller(type="seq", trans="reverse", palette = "Blues", breaks=pretty_breaks(n=10)) +
theme_nothing(legend=TRUE) +
labs(title="Number of lead-poisoned children by town (BLL 15 and up)", fill="")
# BLL20  total children
bll20_total <- screenings_total[c("Town", "BLL20")]
colnames(bll20_total) <- c("id", "bll20")
bll20_total_map <- left_join(towntracts, bll20_total)
dtm20_total <- ggplot() +
geom_polygon(data = bll20_total_map, aes(x=long, y=lat, group=group, fill=bll20), color = "black", size=0.2) +
coord_map() +
scale_fill_distiller(type="seq", trans="reverse", palette = "Blues", breaks=pretty_breaks(n=10)) +
theme_nothing(legend=TRUE) +
labs(title="Number of lead-poisoned children by town (BLL 20 and up)", fill="")
# Output of the map
grid.arrange(dtm5_total,dtm10_total,dtm15_total,dtm20_total, ncol=2)
grid.arrange(dtm5_total,dtm10_total,dtm15_total,dtm20_total, ncol=2)
screenings_percent <- read.csv("data/confirmed.town.percent.csv", stringsAsFactors=FALSE)
# BLL5 percent
bll5_percent <- screenings_percent[c("Town", "BLL5")]
colnames(bll5_percent) <- c("id", "bll5")
bll5_percent_map <- left_join(towntracts, bll5_percent)
dtm5_percent <- ggplot() +
geom_polygon(data = bll5_percent_map, aes(x=long, y=lat, group=group, fill=bll5), color = "black", size=0.2) +
coord_map() +
scale_fill_distiller(type="seq", trans="reverse", palette = "Blues", breaks=pretty_breaks(n=10)) +
theme_nothing(legend=TRUE) +
labs(title="% of lead-poisoned children by town (BLL 5 +)", fill="")
# BLL10 percent
bll10_percent <- screenings_percent[c("Town", "BLL10")]
colnames(bll10_percent) <- c("id", "bll10")
bll10_percent_map <- left_join(towntracts, bll10_percent)
dtm10_percent <- ggplot() +
geom_polygon(data = bll10_percent_map, aes(x=long, y=lat, group=group, fill=bll10), color = "black", size=0.2) +
coord_map() +
scale_fill_distiller(type="seq", trans="reverse", palette = "Blues", breaks=pretty_breaks(n=10)) +
theme_nothing(legend=TRUE) +
labs(title="Percent of lead-poisoned children by town (BLL 10 +)", fill="")
# BLL15 percent
bll15_percent <- screenings_percent[c("Town", "BLL15")]
colnames(bll15_percent) <- c("id", "bll15")
bll15_percent_map <- left_join(towntracts, bll15_percent)
dtm15_percent <- ggplot() +
geom_polygon(data = bll15_percent_map, aes(x=long, y=lat, group=group, fill=bll15), color = "black", size=0.2) +
coord_map() +
scale_fill_distiller(type="seq", trans="reverse", palette = "Blues", breaks=pretty_breaks(n=10)) +
theme_nothing(legend=TRUE) +
labs(title="% of lead-poisoned children by town (BLL 15 +)", fill="")
# BLL20 percent
bll20_percent <- screenings_percent[c("Town", "BLL20")]
colnames(bll20_percent) <- c("id", "bll20")
bll20_percent_map <- left_join(towntracts, bll20_percent)
dtm20_percent <- ggplot() +
geom_polygon(data = bll20_percent_map, aes(x=long, y=lat, group=group, fill=bll20), color = "black", size=0.2) +
coord_map() +
scale_fill_distiller(type="seq", trans="reverse", palette = "Blues", breaks=pretty_breaks(n=10)) +
theme_nothing(legend=TRUE) +
labs(title="% of lead-poisoned children by town (BLL 20 +)", fill="")
# Outputting the maps
grid.arrange(dtm5_percent,dtm10_percent,dtm15_percent,dtm20_percent, ncol=2)
screened <- read.csv("data/children.screened.csv", stringsAsFactors=FALSE)
screened_total <- screened[c("Town", "Children.Under.6.Screened")]
colnames(screened_total) <- c("id", "Children.Under.6.Screened")
screened_total_map <- left_join(towntracts, screened_total)
dtm_s <- ggplot() +
geom_polygon(data = screened_total_map, aes(x=long, y=lat, group=group, fill=Children.Under.6.Screened), color = "black", size=0.2) +
coord_map() +
scale_fill_distiller(type="seq", trans="reverse", palette = "Reds", breaks=pretty_breaks(n=10)) +
theme_nothing(legend=TRUE) +
labs(title="Number of children screened for lead-poisoning by town", fill="")
screened_percent <- screened[c("Town", "Percent.9m.2yrs.Screened")]
colnames(screened_percent) <- c("id", "Percent.9m.2yrs.Screened")
screened_percent_map <- left_join(towntracts, screened_percent)
dtm_p <- ggplot() +
geom_polygon(data = screened_percent_map, aes(x=long, y=lat, group=group, fill=Percent.9m.2yrs.Screened), color = "black", size=0.2) +
coord_map() +
scale_fill_distiller(type="seq", trans="reverse", palette = "Reds", breaks=pretty_breaks(n=10)) +
theme_nothing(legend=TRUE) +
labs(title="Percent of children screened for lead-poisoning by town", fill="")
grid.arrange(dtm_s,dtm_p, ncol=2)
dtm_s <- ggplot() +
geom_polygon(data = screened_total_map, aes(x=long, y=lat, group=group, fill=Children.Under.6.Screened), color = "black", size=0.2) +
coord_map() +
scale_fill_distiller(type="seq", trans="reverse", palette = "Reds", breaks=pretty_breaks(n=10)) +
theme_nothing(legend=TRUE) +
labs(title="Children screened for lead-poisoning by town", fill="")
screened_percent <- screened[c("Town", "Percent.9m.2yrs.Screened")]
colnames(screened_percent) <- c("id", "Percent.9m.2yrs.Screened")
screened_percent_map <- left_join(towntracts, screened_percent)
dtm_p <- ggplot() +
geom_polygon(data = screened_percent_map, aes(x=long, y=lat, group=group, fill=Percent.9m.2yrs.Screened), color = "black", size=0.2) +
coord_map() +
scale_fill_distiller(type="seq", trans="reverse", palette = "Reds", breaks=pretty_breaks(n=10)) +
theme_nothing(legend=TRUE) +
labs(title="% of children screened by town", fill="")
grid.arrange(dtm_s,dtm_p, ncol=2)
grid.arrange(dtm_served,dtm_hqs, ncol=2)
ct <- read.csv("data/lead_ale_samples_ct.csv", stringsAsFactors=FALSE)
# The data set doesn't have the business address. But we can get it from another data set
# -- this one is a list of all public drinking systems in Connecticut
summary <- read.csv("data/water_system_summary.csv", stringsAsFactors=FALSE)
# Join it to the dataset with elevated lead action levels
ct <- left_join(ct, summary, by="PWS.ID")
# Creating a new column with the link-- fortunately the EPA's URL structure is based on a few variables we already have
ct$link <- paste0("https://oaspub.epa.gov/enviro/sdw_report_v3.first_table?pws_id=",
ct$PWS.ID, "&state=CT&source=",
ct$Primary.Source.Code, "&population=",
ct$Population.Served.Count)
# Looking at towns served by drinking water systems with elevated lead violations
served <- ct %>%
group_by(Cities.Served) %>%
dplyr::summarise(Total=n())
served_single <- served[!grepl(",", served$Cities.Served),]
served_single <- served_single[!grepl("-", served_single$Cities.Served),]
colnames(served_single) <- c("id", "Total")
served_single$id <- str_to_title(served_single$id)
comparing <- left_join(comparing, served_single)
cor(comparing$riskscore_raw, comparing$Total, use = "complete")
comparing$Total[is.na(comparing$Total)] <- 0
cor(comparing$riskscore_raw, comparing$Total)
# scrape addresses of listed drinking water headquarter by visiting each individual drinking water page
# creating a temp column
ct$address.city <- ","
# Visiting each link in the row, finding the third row in the first table and getting the string found there
for (i in 1:nrow(ct)) {
i_url <- ct$link[i] %>% read_html()
ct$address.city[i] <- i_url %>% html_node("tr:nth-child(3) td") %>%
html_text()
}
# Cleaning up the address names to isolate the city
ct$town.city <- sub(",.*","",ct$address.city)
ct$state <- sub(".*,","",ct$address.city)
ct$state <- sub("  .*$","",ct$state)
# Ignoring drinking water systems outside of Connecticut-- there's quite a few in New York and Mass.
ct_only <- subset(ct, state=="CT")
write.csv(ct_only, "data/ct_dataframe.csv")
write.csv(ct, "data/ct_dataframe.csv")
head(ct)
?cor
cor(comparing$bll10, comparing$riskscore_raw)
comparing$bll10
View(comparing)
p <- ggplot(big_df_na, aes(riskscore_raw, bll5))
p + geom_point(aes(colour = Type)) + labs(title = "Number of children with lead detected in blood versus risk score by town type", x = "Risk score", y="Children with lead detected in blood stream")
p <- ggplot(big_df_na, aes(riskscore_raw, bll5.percent))
p + geom_point(aes(colour = factor(Type)))
cor(big_df_na$riskscore_raw, big_df_na$bll5.percent, use="complete")
p <- ggplot(big_df_0, aes(bll5.percent, quantile))+ labs(title = "Number of children with lead detected in blood versus risk score by town type", x = "Risk score", y="Children with lead detected in blood stream")
p + geom_point(aes(colour = factor(Type)))
p <- ggplot(big_df_na, aes(quantile, bll5.percent))
p + geom_point(aes(colour = factor(Type)))
